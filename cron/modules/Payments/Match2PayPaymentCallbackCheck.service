<?php

require_once('include/utils/utils.php');
require_once('include/logging.php');
require_once('include/Webservices/Update.php');
require_once('data/CRMEntity.php');

global $adb, $log;

// $paymentQuery = "SELECT vtiger_payments.*,vtiger_crmentity.createdtime,vtiger_crmentity.smownerid FROM vtiger_payments INNER JOIN vtiger_crmentity ON vtiger_payments.paymentsid = vtiger_crmentity.crmid WHERE vtiger_crmentity.deleted = ? AND vtiger_payments.payment_status = ? AND (vtiger_payments.payment_from = ? OR vtiger_payments.payment_from = ?);";

$paymentQuery = "SELECT vtiger_payments.*,vtiger_crmentity.smownerid FROM vtiger_payments
INNER JOIN vtiger_crmentity ON vtiger_payments.paymentsid = vtiger_crmentity.crmid
WHERE vtiger_crmentity.deleted = 0 AND vtiger_payments.payment_status = ? AND vtiger_payments.payment_from = ? AND vtiger_crmentity.createdtime BETWEEN DATE_SUB(NOW(),INTERVAL 48 HOUR) AND NOW()";

$paymentFrom = 'Match2Pay';
$res = $adb->pquery($paymentQuery, array('Pending', $paymentFrom));
$noOfRecord = $adb->num_rows($res);
$module = 'Payments';

$provider = ServiceProvidersManager::getActiveInstanceByProvider($paymentFrom);
if (empty($provider)) {
    $providerErrorMessage = "Error : Match2Pay Cron. Payment provider not found.";
    $log->debug($providerErrorMessage);
    return;
}

if (isset($provider->parameters['auto_confirm']) && $provider->parameters['auto_confirm'] == 'Yes')
{
    if ($noOfRecord > 0)
    {
        for ($i = 0; $i < $noOfRecord; $i++)
        {
            $resultData = array();
            $data = array();
            $payment_operation = $adb->query_result($res, $i, 'payment_operation');
            $payment_status = $adb->query_result($res, $i, 'payment_status');
            $payment_from = $adb->query_result($res, $i, 'payment_from');
            $order_id = $adb->query_result($res, $i, 'order_id');
            $record_id = $adb->query_result($res, $i, 'paymentsid');
            $amount = $adb->query_result($res, $i, 'amount');
            $contactid = $adb->query_result($res, $i, 'contactid');
            $payment_currency = $adb->query_result($res, $i, 'payment_currency');
            $payment_process = $adb->query_result($res, $i, 'payment_process');
            $payment_type = $adb->query_result($res, $i, 'payment_type');
            $payment_to = $adb->query_result($res, $i, 'payment_to');
            $assigned_user_id = $adb->query_result($res, $i, 'smownerid');
            $paymentMethod = $payment_from;

            $status = '';
            $paymentLogQuery = "SELECT data FROM vtiger_payment_logs WHERE order_id = ? AND event = ? ORDER BY id DESC LIMIT 0,1";
            $paymentLogQueryResult = $adb->pquery($paymentLogQuery, array($order_id, 'Match2Pay Callback Response'));
            $noOfRecordlog = $adb->num_rows($paymentLogQueryResult);
            if($noOfRecordlog > 0)
            {
                $resultData = $adb->query_result($paymentLogQueryResult, 0, 'data');
            }
                if(!empty($resultData))
                {
                    $data = html_entity_decode($resultData);
                    $data = json_decode($data, true);
                    $status = $data['json']['status'];
                    $payment_response['data'] = $data;
                }
                if (strtolower($status) == 'done')
                {
                    $status = 'Success';
                    $amount = $data['json']['finalAmount'];
                    $postData = array(
                        'record_id' => '39x' . $record_id,
                        'payment_operation' => $payment_operation,
                        'payment_status' => $status,
                        'assigned_user_id' => '19x'.$assigned_user_id,
                        'amount' => $amount,
                        'contactid' => '12x' . $contactid,
                        'payment_currency' => $payment_currency,
                        'payment_process' => $payment_process,
                        'payment_type' => $payment_type,
                        'payment_from' => $payment_from,
                        'payment_to' => $payment_to,
                        'payment_ref_id' => $data['json']['cryptoTransactionInfo'][0]['txid'],
                    );
                }
                else if (strtolower($status) == 'failed')
                {
                    $status = 'Failed';
                    $postData = array(
                        'record_id' => '39x' . $record_id,
                        'payment_operation' => $payment_operation,
                        'payment_status' => $status,
                        'assigned_user_id' => '19x'.$assigned_user_id,
                        'amount' => $amount,
                        'contactid' => '12x' . $contactid,
                        'payment_currency' => $payment_currency,
                        'payment_process' => $payment_process,
                        'payment_type' => $payment_type,
                        'payment_from' => $payment_from,
                        'payment_to' => $payment_to,
                        'payment_ref_id' => $data['json']['cryptoTransactionInfo'][0]['txid'],
                    );
                }
                
                if(!empty($status))
                {
                    $record = '39x' . $record_id;
                    $recordRes = confirmProcess($postData, $module, $record, $record_id);
                    if ($recordRes['success'])
                    {
                        if (isset($recordRes['error']))
                        {
                            $payment_response['message'] = $recordRes['error']['message'];
                            $payment_response['post_data'] = $postData;
                            createPaymentLog($order_id, $paymentMethod, $paymentMethod, $payment_response, 'Match2Pay Cron - Failed');  
                        }
                        else
                        {
                            $payment_response['message'] = "Success : Callback Response captured and confirmed successfully.";
                            $payment_response['post_data'] = $postData;
                            createPaymentLog($order_id, $paymentMethod, $paymentMethod, $payment_response, 'Match2Pay Cron - Success');  
                        }
                    }
                    else
                    {
                        $payment_response['message'] = $recordRes['error']['code'] . ' - ' . $recordRes['error']['message'];
                        $payment_response['post_data'] = $postData;
                        createPaymentLog($order_id, $paymentMethod, $paymentMethod, $payment_response, 'Match2Pay Cron - Failed');
                    }
                }
        }
    }
    pendingRecordHandler();
}


function pendingRecordHandler()
{
    global $adb, $log;$log->debug('Entering into pendingRecordHandler');
    $paymentQuery = "SELECT vtiger_payments.*,vtiger_crmentity.smownerid FROM vtiger_payments
    INNER JOIN vtiger_crmentity ON vtiger_payments.paymentsid = vtiger_crmentity.crmid
    WHERE vtiger_crmentity.deleted = 0 AND vtiger_payments.payment_status = ? AND vtiger_payments.payment_from = ? AND vtiger_crmentity.createdtime <= DATE_SUB(NOW(),INTERVAL 48 HOUR)";

    $paymentFrom = 'Match2Pay';
    $res = $adb->pquery($paymentQuery, array('Pending', $paymentFrom));
    $noOfRecord = $adb->num_rows($res);
    if ($noOfRecord > 0)
    {
        for ($i = 0; $i < $noOfRecord; $i++)
        {
            $payment_operation = $adb->query_result($res, $i, 'payment_operation');
            $payment_status = $adb->query_result($res, $i, 'payment_status');
            $payment_from = $adb->query_result($res, $i, 'payment_from');
            $order_id = $adb->query_result($res, $i, 'order_id');
            $record_id = $adb->query_result($res, $i, 'paymentsid');
            $amount = $adb->query_result($res, $i, 'amount');
            $contactid = $adb->query_result($res, $i, 'contactid');
            $payment_currency = $adb->query_result($res, $i, 'payment_currency');
            $payment_process = $adb->query_result($res, $i, 'payment_process');
            $payment_type = $adb->query_result($res, $i, 'payment_type');
            $payment_to = $adb->query_result($res, $i, 'payment_to');
            $assigned_user_id = $adb->query_result($res, $i, 'smownerid');
            $paymentMethod = $payment_from;
            
            $status = 'Failed';
            $postData = array(
                'record_id' => '39x' . $record_id,
                'payment_operation' => $payment_operation,
                'payment_status' => $status,
                'assigned_user_id' => '19x'.$assigned_user_id,
                'amount' => $amount,
                'contactid' => '12x' . $contactid,
                'payment_currency' => $payment_currency,
                'payment_process' => $payment_process,
                'payment_type' => $payment_type,
                'payment_from' => $payment_from,
                'payment_to' => $payment_to,
            );
            
            $record = '39x' . $record_id;
            $recordRes = confirmProcess($postData, $module, $record, $record_id);
            $payment_response['message'] = $recordRes['error']['code'] . ' - ' . $recordRes['error']['message'] . ' - callback missing';
            $payment_response['post_data'] = $postData;
            createPaymentLog($order_id, $paymentMethod, $paymentMethod, $payment_response, 'Match2Pay Cron - Failed');
        }
    }
}

function confirmProcess($postData, $module, $record, $record_id)
{
    global $log;
    $response = array();
    try
    {
        $recordModel = Vtiger_Record_Model::getInstanceById($record_id, 'Payments');
        $recordModel->set('mode', 'edit');
        $status = $postData['payment_status'];
        $recordModel->set('amount', $postData['amount']);
        $recordModel->set('payment_ref_id', $postData['payment_ref_id']);
        if ($status === 'Success')
        {
            $recordModel->set('payment_status', 'Confirmed');
            $response = array('success' => true);
        } 
        else if($status === 'Failed')
        {
            $rejectMsg = 'Payment cancelled by Match2Pay cron due to missing callback.';
            $recordModel->set('payment_status', 'Failed');
            $recordModel->set('failure_reason', $rejectMsg);
            $response = array('success' => true, 'error' => array('code' => 1013, 'message' => $rejectMsg));
        }
        $recordModel->save();
    }
    catch (Exception $e)
    {
	$response = array('success' => false, 'error' => array('code' => 1012, 'message' => $e->getMessage()));
    }
    return $response;
}

/*function checkLogin() {
    global $accessKey, $site_URL, $frontform_username, $frontform_password;
    $url = $site_URL . 'modules/Mobile/api.php';
    $data = array(
        '_operation' => 'loginAndFetchModules',
        'username' => $frontform_username,
        'password' => $frontform_password,
    );
    $params = '';
    foreach ($data as $key => $value)
        $params .= $key . '=' . $value . '&';
    $params = trim($params, '&');

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url); //Remote Location URL
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //Return data instead printing directly in Browser
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 7); //Timeout after 7 seconds
    curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)");
    curl_setopt($ch, CURLOPT_HEADER, 0);

    //We add these 2 lines to create POST request
    curl_setopt($ch, CURLOPT_POST, count($data)); //number of parameters sent
    curl_setopt($ch, CURLOPT_POSTFIELDS, $params); //parameters data

    $result = curl_exec($ch);
    $response = json_decode($result, true);
    return $response;
}

function UpdateRecord($postData, $moduleName, $record) {
    global $site_URL;
    $checkLogin = checkLogin();
    $sessionName = $checkLogin['result']['login']['session'];
    $url = $site_URL . 'modules/Mobile/api.php';
    $postData = json_encode($postData);
    $data = array('_operation' => 'saveRecord', 'record' => $record, '_session' => $sessionName, 'module' => $moduleName, 'values' => $postData);
    $params = '';
    foreach ($data as $key => $value)
        $params .= $key . '=' . $value . '&';
    $params = trim($params, '&');

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url); //Remote Location URL
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //Return data instead printing directly in Browser
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 7); //Timeout after 7 seconds
    curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)");
    curl_setopt($ch, CURLOPT_HEADER, 0);

    //We add these 2 lines to create POST request
    curl_setopt($ch, CURLOPT_POST, count($data)); //number of parameters sent
    curl_setopt($ch, CURLOPT_POSTFIELDS, $params); //parameters data

    $result = curl_exec($ch);
    $response = json_decode($result, true);
    return $response;
}*/

function createPaymentLog($order_id, $provider_type, $provider_title, $request, $event) {
    global $adb;
    $req = json_encode($request);
    $date = date('Y-m-d H:i:s');
    $query = "INSERT INTO `vtiger_payment_logs` (`order_id`, `provider_type`, `provider_title`,`data`, `status`, `event`, `createdtime`) VALUES ('$order_id','$provider_type','$provider_title','$req','Created','$event','$date')";
    $result = $adb->pquery($query, array());
}
?>